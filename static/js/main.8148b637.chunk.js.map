{"version":3,"sources":["serviceWorker.ts","3d/SceneCanvas.tsx","editor/Editor.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Container","styled","div","_templateObject","SceneCanvas","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","containerRef","React","rafHandle","previousTimestamp","target","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","grid","GridHelper","cube","keysPressed","Set","isDraggingCamera","resize","current","_this$containerRef$cu","offsetWidth","offsetHeight","aspect","updateProjectionMatrix","setSize","animate","t","requestAnimationFrame","dt","translationAxis","Vector3","isKeyPressed","x","y","translateOnAxis","rotateOnWorldAxis","rotateOnAxis","render","onClick","e","size","getSize","Vector2","pageX","currentTarget","offsetLeft","pageY","offsetTop","console","log","raycaster","Raycaster","setFromCamera","intersections","intersectObjects","children","material","color","set","i","length","object","onWheel","preventDefault","delta","deltaY","deltaMode","translateZ","onMouseDown","button","requestPointerLock","onMouseUp","document","exitPointerLock","onMouseMove","movementX","movementY","onKeyDown","add","key","onKeyUp","delete","geometry","BoxGeometry","MeshBasicMaterial","Mesh","geometry2","material2","cube2","translateX","position","z","appendChild","domElement","focus","addEventListener","cancelAnimationFrame","removeEventListener","has","react","tabIndex","ref","onContextMenu","Editor_templateObject","Sidebar","aside","_templateObject2","Main","main","_templateObject3","Editor","react_default","a","createElement","Editor_Container","SceneCanvas_SceneCanvas","Component","ReactDOM","Editor_Editor","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8148b637.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport {\n  Scene,\n  PerspectiveCamera,\n  WebGLRenderer,\n  Mesh,\n  Vector3,\n  Vector2\n} from \"three\";\nimport styled from \"styled-components\";\nimport { BoxGeometry } from \"three\";\nimport { MeshBasicMaterial } from \"three\";\nimport { Raycaster } from \"three\";\nimport { GridHelper } from \"three\";\n\n// Circular position based on timestamp\nconst f = (t: number) =>\n  new Vector3(\n    3 * Math.sin((t / 4000) * 2 * Math.PI),\n    1,\n    3 * Math.cos((t / 4000) * 2 * Math.PI)\n  );\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100%;\n\n  :focus {\n    border-left: 2px solid blue;\n  }\n`;\n\nexport default class SceneCanvas extends React.Component {\n  containerRef = React.createRef<HTMLDivElement>();\n  rafHandle = 0;\n  previousTimestamp = 0;\n\n  target: Mesh | null = null;\n\n  scene = new Scene();\n  camera = new PerspectiveCamera(75, 1, 0.1, 1000);\n  renderer = new WebGLRenderer();\n  grid = new GridHelper(10, 10)\n  cube: Mesh;\n\n  keysPressed = new Set<string>();\n  isDraggingCamera = false;\n\n  constructor(props: any) {\n    super(props);\n\n    const geometry = new BoxGeometry(1, 1, 1);\n    const material = new MeshBasicMaterial({\n      color: 0xffffff,\n      // wireframe: true\n    });\n    this.cube = new Mesh(geometry, material);\n\n    const geometry2 = new BoxGeometry(0.25, 0.25, 0.25);\n    const material2 = new MeshBasicMaterial({\n      color: 0xffffff,\n    });\n    const cube2 = new Mesh(geometry2, material2);\n    cube2.translateX(1);\n\n    this.scene.add(cube2);\n    this.scene.add(this.cube);\n    this.scene.add(this.grid);\n    this.camera.position.y = 1;\n    this.camera.position.z = 5;\n  }\n\n  componentDidMount() {\n    this.containerRef.current!.appendChild(this.renderer.domElement);\n    this.containerRef.current!.focus();\n    this.resize();\n    this.animate(0);\n    window.addEventListener(\"resize\", this.resize);\n  }\n\n  componentWillUnmount() {\n    window.cancelAnimationFrame(this.rafHandle);\n    window.removeEventListener(\"resize\", this.resize);\n  }\n\n  resize = () => {\n    if (!this.containerRef.current) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = this.containerRef.current;\n\n    this.camera.aspect = offsetWidth / offsetHeight;\n    this.camera.updateProjectionMatrix();\n\n    // this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(offsetWidth, offsetHeight);\n  };\n\n  animate: FrameRequestCallback = t => {\n    this.rafHandle = window.requestAnimationFrame(this.animate);\n\n    const dt = (t - this.previousTimestamp) / 1000;\n    this.previousTimestamp = t;\n\n    // this.cube.rotation.x += 0.01;\n    // this.cube.rotation.y += 0.01;\n    // this.cube.position.copy(f(t));\n\n    const translationAxis = new Vector3();\n    if (this.isKeyPressed('a')) {\n      translationAxis.x -= 1;\n    }\n    if (this.isKeyPressed('d')) {\n      translationAxis.x += 1;\n    }\n    if (this.isKeyPressed('w')) {\n      translationAxis.y += 1;\n    }\n    if (this.isKeyPressed('s')) {\n      translationAxis.y -= 1;\n    }\n    if (translationAxis.x || translationAxis.y) {\n      this.camera.translateOnAxis(translationAxis, 2 * dt);\n    }\n\n    if (this.isKeyPressed('ArrowLeft')) {\n      this.camera.rotateOnWorldAxis(new Vector3(0, 1, 0), dt);\n    }\n    if (this.isKeyPressed('ArrowRight')) {\n      this.camera.rotateOnWorldAxis(new Vector3(0, -1, 0), dt);\n    }\n    if (this.isKeyPressed('ArrowUp')) {\n      this.camera.rotateOnAxis(new Vector3(1, 0, 0), dt);\n    }\n    if (this.isKeyPressed('ArrowDown')) {\n      this.camera.rotateOnAxis(new Vector3(-1, 0, 0), dt);\n    }\n\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  isKeyPressed(key: string) {\n    return this.keysPressed.has(key);\n  }\n\n  onClick: React.MouseEventHandler<HTMLElement> = e => {\n    const size = this.renderer.getSize(new Vector2());\n    const x = ((e.pageX - e.currentTarget.offsetLeft) / size.x) * 2 - 1;\n    const y = -((e.pageY - e.currentTarget.offsetTop) / size.y) * 2 + 1;\n    console.log(size, x, y);\n\n    const raycaster = new Raycaster();\n    raycaster.setFromCamera({ x, y }, this.camera);\n    const intersections = raycaster.intersectObjects(this.scene.children, true);\n    if (this.target) {\n      (this.target.material as MeshBasicMaterial).color.set(0xffffff);\n      this.target = null;\n    }\n    for (let i = 0; i < intersections.length && !this.target; i++) {\n      if (intersections[i].object !== this.grid) {\n        this.target = intersections[i].object as Mesh;\n        console.log(this.target);\n        (this.target.material as MeshBasicMaterial).color.set(0xff0000);\n      }\n    }\n  };\n\n  onWheel: React.WheelEventHandler = e => {\n    e.preventDefault();\n    //console.log('onWheel', e.deltaX, e.deltaY, e.deltaZ, e.deltaMode);\n    let delta = e.deltaY;\n    if (e.deltaMode === 0) {\n      // More granular zoom for pixel mode\n      delta /= 15;\n    }\n    this.camera.translateZ(delta);\n  }\n\n  onMouseDown: React.MouseEventHandler = e => {\n    if (e.button === 2) {\n      this.isDraggingCamera = true;\n      this.containerRef.current!.requestPointerLock();\n    }\n  }\n\n  onMouseUp: React.MouseEventHandler = e => {\n    if (e.button === 2 && this.isDraggingCamera) {\n      document.exitPointerLock();\n      this.isDraggingCamera = false;\n    }\n  }\n\n  onMouseMove: React.MouseEventHandler = e => {\n    if (this.isDraggingCamera) {\n      if (e.movementX) {\n        this.camera.rotateOnWorldAxis(new Vector3(0, -1, 0), e.movementX / 100);\n      }\n      if (e.movementY) {\n        this.camera.rotateOnAxis(new Vector3(-1, 0, 0), e.movementY / 100);\n      }\n    }\n  }\n\n  onKeyDown: React.KeyboardEventHandler = e => {\n    this.keysPressed.add(e.key);\n    //console.log(e.key);\n  };\n\n  onKeyUp: React.KeyboardEventHandler = e => {\n    this.keysPressed.delete(e.key);\n  };\n\n  render(): React.ReactNode {\n    return (\n      <Container\n        tabIndex={-1}\n        ref={this.containerRef}\n        onClick={this.onClick}\n        onWheel={this.onWheel}\n        onMouseDown={this.onMouseDown}\n        onMouseUp={this.onMouseUp}\n        onMouseMove={this.onMouseMove}\n        onKeyDown={this.onKeyDown}\n        onKeyUp={this.onKeyUp}\n        onContextMenu={e => e.preventDefault()}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SceneCanvas from \"../3d/SceneCanvas\";\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  background: #000;\n  display: flex;\n`;\n\nconst Sidebar = styled.aside`\n  width: 250px;\n  height: 100%;\n  background: #666;\n`;\n\nconst Main = styled.main`\n  flex: 1;\n  height: 100%;\n`;\n\nexport default class Editor extends React.Component {\n  render(): React.ReactNode {\n    return (\n      <Container>\n        <Sidebar>Sidebar</Sidebar>\n        <Main>\n          <SceneCanvas />\n        </Main>\n      </Container>\n    );\n  }\n}\n","import \"normalize.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Editor from \"./editor/Editor\";\n\nReactDOM.render(<Editor />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}